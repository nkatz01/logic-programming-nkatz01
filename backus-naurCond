<constant-expression> ::= <conditional-expression>

<conditional-expression> ::= <logical-or-expression>
                           
						   
<logical-or-expression> ::= <logical-and-expression>
                          | <logical-or-expression> || <logical-and-expression>

<logical-and-expression> ::= <equality-expression>
                           | <logical-and-expression> && <equality-expression>


<equality-expression> ::= <relational-expression>
                        | <equality-expression> == <relational-expression>
                        | <equality-expression> != <relational-expression>

<relational-expression> ::= <atomic_texpre> //already implemented 1st line
                          | <relational-expression> < <atomic_texpre>
                          | <relational-expression> > <atomic_texpre>
                          | <relational-expression> <= <atomic_texpre>
                          | <relational-expression> >= <atomic_texpre>
						  
atomic_texpre			 ::= '(' conditional-expression ')'			  
						 | <additive-expression>
						  
						  				  
						  
						  
ArithmeticExpression     : AdditiveExpression
                         ;

AdditiveExpression       : MultiplicativeExpression
                         | MultiplicativeExpression '+' AdditiveExpression
                         | MultiplicativeExpression '-' AdditiveExpression
                         ;

MultiplicativeExpression : AtomicExpression
                         | AtomicExpression '*' MultiplicativeExpression
                         | AtomicExpression '/' MultiplicativeExpression
                         | AtomicExpression '%' MultiplicativeExpression
                         ;

AtomicExpression         : '(' ArithmeticExpression ')'
                         | ['0'..'9']+
                         ;
						 
----------------------------------------------------------------------------------
ArithmeticExpression     : AdditiveExpression
                         ;

AdditiveExpression       : MultiplicativeExpression
                         | MultiplicativeExpression '+' AdditiveExpression
                         | MultiplicativeExpression '-' AdditiveExpression
                         ;

MultiplicativeExpression : ExponentialExpression
                         | ExponentialExpression '*' MultiplicativeExpression
                         | ExponentialExpression '/' MultiplicativeExpression
                         | ExponentialExpression '%' MultiplicativeExpression
                         ;

ExponentialExpression    : UnaryExpression
                         | UnaryExpression '^' ExponentialExpression
                         ;

UnaryExpression          : '-' UnaryExpression
                         | AtomicExpression
                         ;

AtomicExpression         : '(' ArithmeticExpression ')'
                         | ['0'..'9']+
                         ;

e(N) --> multiplicative(N1), additive_rest(N1,N).

additive_rest(N1,N) --> [+], !, multiplicative(N2), {N3 is N1+N2}, additive_rest(N3,N);
						[-], !, multiplicative(N2), {N3 is N1-N2}, additive_rest(N3,N).
additive_rest(N,N) --> [].

multiplicative(N) --> Exponential(N1), trest(N1,N).
multiplicative_rest(N1,N) --> [*], !, Exponential(N2), {N3 is N1*N2}, multiplicative_rest(N3,N);
								[/], !, Exponential(N2), {N3 is N1/N2}, multiplicative_rest(N3,N).
multiplicative_rest(N,N) --> [].

Exponential(N) --> n(N);
     n(N1), [^], f(N2), {N is N1**N2}.

n(N) --> ['('], !, e(N), [')'];
     [-], !, e(N1), {N is -N1};
     num(N). 

num(N) --> [N], {number(N)}.						 
						 